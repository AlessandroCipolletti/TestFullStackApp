datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/backend/schemas"
  useMultipleFiles                 = false
  writeBarrelFiles                 = false
  createInputTypes                 = false
  createModelTypes                 = true
  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = false
  createRelationValuesTypes        = false
  createPartialTypes               = false
  useDefaultValidators             = false
  coerceDate                       = true
}

model User {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String         @unique
  firstName   String?
  lastName    String?
  disabled    Boolean        @default(false)
  deleted     Boolean        @default(false)
  blacklisted Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
  passwords   UserPassword[]
  sessions    UserSession[]
}

// user password history, only one active at a time
model UserPassword {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  password  String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

// user login sessions, one week duration
model UserSession {
  id           String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  refreshToken String
  duration     String
  disabled     Boolean             @default(false)
  createdAt    DateTime            @default(now())
  accesses     UserSessionAccess[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

// each session refresh (new access token generation using refreshToken), one hour duration
model UserSessionAccess {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accessToken String
  duration    String
  createdAt   DateTime @default(now())

  UserSession   UserSession @relation(fields: [userSessionId], references: [id])
  userSessionId String      @db.Uuid
}
